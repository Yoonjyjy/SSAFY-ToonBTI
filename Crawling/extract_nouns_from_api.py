# -*- coding: utf-8 -*-
"""extract_nouns_from_api.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103Kykaf9QvQDO_FKUgkLLku3cPAEP24q
"""

!sudo apt-get install g++ openjdk-8-jdk python3-dev python3-pip curl
!python3 -m pip install --upgrade pip
!python3 -m pip install konlpy

from google.colab import drive
drive.mount('/content/drive')

from konlpy.tag import Okt
okt = Okt()

"""원하는 플랫폼 뽑기"""

#@title openApi에서 플랫폼 필터링 (data_comic.csv | output: target_platform.csv)
import csv

# 빈 리스트 생성
data = []
# csv 파일 열기
with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/webtoon_data/data_comic.csv', 'r', encoding='utf-8') as f:
    reader = csv.reader(f)
    # 첫 번째 줄은 컬럼명이므로 건너뜀
    columns = next(reader)
    title_idx = columns.index('prdctNm')
    pltfomCd_idx = columns.index('pltfomCd')
    
    # 각 row에서 title과 synopsis 추출하여 리스트에 저장하고, 이를 각각의 리스트에 추가
    for row in reader:
        if row[pltfomCd_idx]:
            pltfomCd = int(row[pltfomCd_idx])
            if pltfomCd in [32, 38, 41, 72, 78, 122, 133, 142, 143, 151, 152, 157]:
                data.append(row)

    with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/target_platform.csv', 'w', encoding='utf-8', newline='') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(columns) # 헤더 작성
            for item in data:
                writer.writerow(item)

#@title [제목]중복제거한 명사 추출 (input: target_platform.csv | output: set_title_nouns.csv )
# 빈 리스트 생성
titles = []
# csv 파일 열기
with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/target_platform.csv', 'r', encoding='utf-8') as f:
    reader = csv.reader(f)
    # 첫 번째 줄은 컬럼명이므로 건너뜀
    columns = next(reader)
    title_idx = columns.index('prdctNm')

    for row in reader:
      titles.append(row[title_idx])

title_nounses_list = []

set_title_nounses_list = []
for title in titles:
    title_nounses = okt.nouns(title)
    temp = []
    for nouns in title_nounses:
        if 1 < len(str(nouns)) :
          temp.append(nouns)
          set_title_nounses_list.append(nouns)
    if len(temp) > 0:
        title_nounses_list.append(temp)

new_list = list(set(set_title_nounses_list))

with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/set_title_nouns.csv', 'w', encoding='utf-8', newline='') as csv_file:
    writer = csv.writer(csv_file)
    writer.writerow(["nouns"]) # 헤더 작성
    for item in new_list:
        writer.writerow([item])

#@title [설명]중복제거한 명사 추출 (input: target_platform.csv | output: set_outline_nouns.csv )
# 빈 리스트 생성
outlines = []
# csv 파일 열기
with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/target_platform.csv', 'r', encoding='utf-8') as f:
    reader = csv.reader(f)
    # 첫 번째 줄은 컬럼명이므로 건너뜀
    columns = next(reader)
    outline_idx = columns.index('outline')

    for row in reader:
      outlines.append(row[outline_idx])

outline_nounses_list = []

set_outline_nounses_list = []
for outline in outlines:
    if not outline:
      continue
    outline_nounses = okt.nouns(outline)
    temp = []
    for nouns in outline_nounses:
        if 1 < len(str(nouns)) :
          temp.append(nouns)
          set_outline_nounses_list.append(nouns)
    if len(temp) > 0:
        outline_nounses_list.append(temp)

new_list = list(set(set_outline_nounses_list))

with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/set_outline_nouns.csv', 'w', encoding='utf-8', newline='') as csv_file:
    writer = csv.writer(csv_file)
    writer.writerow(["nouns"]) # 헤더 작성
    for item in new_list:
        writer.writerow([item])

#@title [제목]명사 데이터 추출(input: target_platform.csv | output: title_nouns.csv )
filter = []
for nounses in title_nounses_list:
  if len(nounses) > 1:
    filter.append(nounses)

with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/title_nouns.csv', 'w', encoding='utf-8', newline='') as csv_file:
    writer = csv.writer(csv_file)
    for item in filter:
        writer.writerow(item)

#@title [설명]명사 데이터 추출 (input: target_platform.csv | output: outline_nouns.csv )
filter = []
for nounses in outline_nounses_list:
  if len(nounses) > 1:
    filter.append(nounses)

with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/outline_nouns.csv', 'w', encoding='utf-8', newline='') as csv_file:
    writer = csv.writer(csv_file)
    for item in filter:
        writer.writerow(item)

import csv

# 빈 리스트 생성
titles = []

# csv 파일 열기
with open('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/set_outline_nouns.csv', 'r', encoding='utf-8') as f:
    reader = csv.reader(f)
    # 첫 번째 줄은 컬럼명이므로 건너뜀
    next(reader)
    
    # 각 row에서 title과 synopsis 추출하여 리스트에 저장하고, 이를 각각의 리스트에 추가
    for title in reader:
        titles.append(title[0])

import pandas as pd

df = pd.DataFrame(data=0, columns=titles, index=titles)

df.to_excel('/content/drive/MyDrive/SSAFY/특화프로젝트(A302)/플랫폼 필터링 버전/output.xlsx', sheet_name='Sheet1', index=True, header=True)